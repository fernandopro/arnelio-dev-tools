/**
 * Test de verificaci√≥n de registro de men√∫ Dev-Tools
 * Usar en consola del navegador para verificar si el men√∫ est√° presente
 */

console.log('üîß Testing Dev-Tools Menu Registration...');

// Test 1: Verificar si el men√∫ Dev-Tools existe en el sidebar
function testMenuPresence() {
    console.log('\nüìã Test 1: Verificando presencia del men√∫...');
    
    // Buscar el enlace del men√∫ Dev-Tools
    const devToolsMenu = document.querySelector('a[href*="tools.php?page=dev-tools"]');
    
    if (devToolsMenu) {
        console.log('‚úÖ Men√∫ Dev-Tools encontrado en el sidebar');
        console.log('üìç Elemento:', devToolsMenu);
        console.log('üìÑ Texto del men√∫:', devToolsMenu.textContent.trim());
        
        // Verificar si est√° en la secci√≥n Tools
        const toolsSection = devToolsMenu.closest('li.wp-has-submenu, li.menu-top');
        if (toolsSection) {
            const sectionTitle = toolsSection.querySelector('.wp-menu-name, .menu-top .wp-menu-name');
            console.log('üìÇ Secci√≥n padre:', sectionTitle ? sectionTitle.textContent.trim() : 'No identificada');
        }
        
        return true;
    } else {
        console.log('‚ùå Men√∫ Dev-Tools NO encontrado en el sidebar');
        
        // Buscar cualquier enlace relacionado con dev-tools
        const anyDevToolsLink = document.querySelector('a[href*="dev-tools"], a[href*="dev_tools"]');
        if (anyDevToolsLink) {
            console.log('‚ö†Ô∏è Encontrado enlace relacionado:', anyDevToolsLink.href);
        }
        
        return false;
    }
}

// Test 2: Verificar estructura del men√∫ Tools
function testToolsMenuStructure() {
    console.log('\nüîß Test 2: Analizando estructura del men√∫ Tools...');
    
    // Buscar el men√∫ Tools
    const toolsMenu = document.querySelector('a[href="tools.php"]');
    
    if (toolsMenu) {
        console.log('‚úÖ Men√∫ Tools encontrado');
        
        // Buscar el submenu
        const toolsItem = toolsMenu.closest('li');
        const submenu = toolsItem ? toolsItem.querySelector('ul.wp-submenu') : null;
        
        if (submenu) {
            console.log('üìã Submen√∫s en Tools:');
            const submenuItems = submenu.querySelectorAll('li a');
            submenuItems.forEach((item, index) => {
                console.log(`  ${index + 1}. ${item.textContent.trim()} (${item.href})`);
            });
        } else {
            console.log('‚ö†Ô∏è No se encontr√≥ submenu en Tools');
        }
    } else {
        console.log('‚ùå Men√∫ Tools no encontrado');
    }
}

// Test 3: Verificar si la p√°gina responde
async function testDevToolsPageAccess() {
    console.log('\nüåê Test 3: Verificando acceso a la p√°gina Dev-Tools...');
    
    try {
        // Construir URL de la p√°gina dev-tools
        const currentUrl = new URL(window.location.href);
        const devToolsUrl = `${currentUrl.origin}${currentUrl.pathname}?page=dev-tools`;
        
        console.log('üîó URL a verificar:', devToolsUrl);
        
        // Solo podemos verificar si hay un elemento que nos lleve all√≠
        const devToolsLink = document.querySelector('a[href*="page=dev-tools"]');
        
        if (devToolsLink) {
            console.log('‚úÖ Enlace a p√°gina dev-tools encontrado');
            console.log('üîó URL del enlace:', devToolsLink.href);
        } else {
            console.log('‚ùå No se encontr√≥ enlace a p√°gina dev-tools');
        }
        
    } catch (error) {
        console.log('‚ùå Error verificando acceso:', error.message);
    }
}

// Test 4: Verificar hooks y timing
function testHooksAndTiming() {
    console.log('\n‚è∞ Test 4: Informaci√≥n de hooks y timing...');
    
    // Verificar si estamos en el admin
    const isAdmin = document.body.classList.contains('wp-admin');
    console.log('üèõÔ∏è En √°rea de administraci√≥n:', isAdmin);
    
    // Verificar p√°gina actual
    const currentPage = new URLSearchParams(window.location.search).get('page');
    console.log('üìÑ P√°gina actual:', currentPage || 'P√°gina principal del admin');
    
    // Verificar si hay errores de JavaScript
    if (window.console && console.error) {
        console.log('‚ö†Ô∏è Revisar errores de consola arriba para problemas de carga');
    }
}

// Ejecutar todos los tests
async function runAllTests() {
    console.log('üöÄ Iniciando tests de registro de men√∫ Dev-Tools...\n');
    
    const menuFound = testMenuPresence();
    testToolsMenuStructure();
    await testDevToolsPageAccess();
    testHooksAndTiming();
    
    console.log('\nüìä RESUMEN:');
    console.log(`Men√∫ Dev-Tools registrado: ${menuFound ? '‚úÖ S√ç' : '‚ùå NO'}`);
    
    if (!menuFound) {
        console.log('\nüîß POSIBLES SOLUCIONES:');
        console.log('1. Verificar que el hook admin_menu se ejecute antes de que se renderice el men√∫');
        console.log('2. Verificar permisos de usuario (manage_options)');
        console.log('3. Verificar que el DashboardModule se inicialice correctamente');
        console.log('4. Verificar logs de error en la consola del servidor');
    }
    
    console.log('\nüîç Para m√°s informaci√≥n, revisar los logs del servidor en wp-content/debug.log');
}

// Ejecutar autom√°ticamente
runAllTests();
