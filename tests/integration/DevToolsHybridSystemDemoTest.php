<?php
/**
 * Test de demostraci√≥n del Sistema H√≠brido Anti-Deadlock
 * 
 * Este test demuestra todas las capacidades del sistema h√≠brido:
 * - Detecci√≥n autom√°tica de contextos
 * - Control manual del comportamiento  
 * - Compatibilidad con WordPress oficial
 * - M√©todos de diagn√≥stico
 * 
 * @package TarokinaPro\DevTools\Tests
 */

/**
 * Demostraci√≥n del Sistema H√≠brido DevToolsTestCase
 */
class DevToolsHybridSystemDemoTest extends DevToolsTestCase
{
    /**
     * Test que muestra la detecci√≥n autom√°tica de contexto
     */
    public function testAutoContextDetection(): void
    {
        // Obtener informaci√≥n del contexto actual
        $context = $this->getTestContext();
        
        // Verificar que tenemos toda la informaci√≥n
        $this->assertArrayHasKey('anti_deadlock_active', $context);
        $this->assertArrayHasKey('risky_context_detected', $context);
        $this->assertArrayHasKey('execution_mode', $context);
        $this->assertArrayHasKey('ajax_context', $context);
        
        // Mostrar informaci√≥n (solo en modo verbose)
        if (in_array('--verbose', $_SERVER['argv'] ?? [])) {
            echo "\nüîç CONTEXTO DE EJECUCI√ìN:\n";
            echo "Anti-deadlock activo: " . ($context['anti_deadlock_active'] ? 'S√ç' : 'NO') . "\n";
            echo "Contexto riesgoso detectado: " . ($context['risky_context_detected'] ? 'S√ç' : 'NO') . "\n";
            echo "Modo de ejecuci√≥n: " . $context['execution_mode'] . "\n";
            echo "Contexto AJAX: " . ($context['ajax_context'] ? 'S√ç' : 'NO') . "\n";
            echo "Override de instancia: " . ($context['instance_override'] ?? 'null') . "\n";
            echo "Override global: " . ($context['global_setting'] ?? 'null') . "\n";
        }
        
        $this->assertTrue(true, 'Detecci√≥n de contexto completada exitosamente');
    }
    
    /**
     * Test que demuestra el control manual - Modo est√°ndar WordPress
     */
    public function testManualStandardMode(): void
    {
        // Forzar modo est√°ndar para este test
        $this->useStandardWordPressBehavior();
        
        // Verificar que el modo cambi√≥
        $this->assertFalse($this->isUsingAntiDeadlock(), 
            'El test deber√≠a usar comportamiento est√°ndar de WordPress');
        
        // Crear un post usando factory est√°ndar
        $post_id = $this->factory->post->create([
            'post_title' => 'Test Post - Modo Est√°ndar',
            'post_content' => 'Este post fue creado usando comportamiento est√°ndar de WordPress'
        ]);
        
        $this->assertIsInt($post_id);
        $this->assertGreaterThan(0, $post_id);
        
        // Verificar que el post existe
        $post = get_post($post_id);
        $this->assertInstanceOf('WP_Post', $post);
        $this->assertEquals('Test Post - Modo Est√°ndar', $post->post_title);
        
        echo "\n‚úÖ Modo est√°ndar WordPress: Funcionalidad verificada\n";
    }
    
    /**
     * Test que demuestra el control manual - Modo anti-deadlock
     */
    public function testManualAntiDeadlockMode(): void
    {
        // Forzar modo anti-deadlock para este test
        $this->useAntiDeadlockBehavior();
        
        // Verificar que el modo cambi√≥
        $this->assertTrue($this->isUsingAntiDeadlock(), 
            'El test deber√≠a usar protecciones anti-deadlock');
        
        // Crear un post usando factory con protecciones
        $post_id = $this->factory->post->create([
            'post_title' => 'Test Post - Modo Anti-Deadlock',
            'post_content' => 'Este post fue creado usando protecciones anti-deadlock'
        ]);
        
        $this->assertIsInt($post_id);
        $this->assertGreaterThan(0, $post_id);
        
        // Verificar que el post existe
        $post = get_post($post_id);
        $this->assertInstanceOf('WP_Post', $post);
        $this->assertEquals('Test Post - Modo Anti-Deadlock', $post->post_title);
        
        echo "\nüõ°Ô∏è Modo anti-deadlock: Protecciones activas, funcionalidad verificada\n";
    }
    
    /**
     * Test que demuestra el comportamiento autom√°tico
     */
    public function testAutomaticBehavior(): void
    {
        // Resetear a comportamiento autom√°tico
        $this->useAutomaticBehavior();
        
        // El comportamiento depender√° del contexto de ejecuci√≥n
        $context = $this->getTestContext();
        $is_using_anti_deadlock = $this->isUsingAntiDeadlock();
        
        if ($is_using_anti_deadlock) {
            echo "\nü§ñ Modo autom√°tico: Anti-deadlock ACTIVADO (contexto riesgoso detectado)\n";
        } else {
            echo "\nü§ñ Modo autom√°tico: Comportamiento EST√ÅNDAR (contexto seguro detectado)\n";
        }
        
        // Crear datos de prueba independientemente del modo
        $user_id = $this->factory->user->create([
            'user_login' => 'test_automatic_mode',
            'user_email' => 'automatic@test.local'
        ]);
        
        $this->assertIsInt($user_id);
        $this->assertGreaterThan(0, $user_id);
        
        // Verificar que el usuario existe
        $user = get_user_by('ID', $user_id);
        $this->assertInstanceOf('WP_User', $user);
        $this->assertEquals('test_automatic_mode', $user->user_login);
        
        $this->assertTrue(true, 'Comportamiento autom√°tico funciona correctamente');
    }
    
    /**
     * Test de compatibilidad con m√©todos de WP_UnitTestCase
     */
    public function testWordPressCompatibility(): void
    {
        // Verificar que todos los m√©todos de WP_UnitTestCase est√°n disponibles
        $this->assertTrue(method_exists($this, 'factory'), 
            'El m√©todo factory de WP_UnitTestCase debe estar disponible');
        
        $this->assertTrue(method_exists($this, 'assertEqualSets'), 
            'Los m√©todos de assertion de WordPress deben estar disponibles');
        
        // Usar factory de WordPress para crear datos
        $post_id = $this->factory->post->create();
        $user_id = $this->factory->user->create();
        $comment_id = $this->factory->comment->create(['comment_post_ID' => $post_id]);
        
        // Verificar que todo funciona como en WP_UnitTestCase est√°ndar
        $this->assertIsInt($post_id);
        $this->assertIsInt($user_id);
        $this->assertIsInt($comment_id);
        
        // Usar assertions espec√≠ficas de WordPress
        $this->assertEqualSets([$post_id], [get_post($post_id)->ID]);
        
        echo "\n‚úÖ Compatibilidad con WP_UnitTestCase: 100% preservada\n";
    }
    
    /**
     * Test de control via variables de entorno
     */
    public function testEnvironmentVariableControl(): void
    {
        // Simular diferentes configuraciones de entorno
        $original_env = getenv('DEV_TOOLS_FORCE_ANTI_DEADLOCK');
        
        // Las variables de entorno se detectan al momento de cargar la clase,
        // as√≠ que este test solo verifica que el mecanismo existe
        $context = $this->getTestContext();
        $this->assertArrayHasKey('environment_override', $context);
        
        // Verificar que el override funciona (informacional)
        if ($context['environment_override']) {
            echo "\nüîß Variable de entorno detectada: " . $context['environment_override'] . "\n";
        } else {
            echo "\nüîß Sin override de variable de entorno (usando detecci√≥n autom√°tica)\n";
        }
        
        $this->assertTrue(true, 'Control via variables de entorno disponible');
    }
    
    /**
     * Test de performance - verificar que no hay overhead significativo
     */
    public function testPerformanceImpact(): void
    {
        $start_time = microtime(true);
        
        // Crear m√∫ltiples elementos para medir performance
        $post_ids = [];
        for ($i = 0; $i < 10; $i++) {
            $post_ids[] = $this->factory->post->create([
                'post_title' => "Performance Test Post {$i}"
            ]);
        }
        
        $end_time = microtime(true);
        $execution_time = ($end_time - $start_time) * 1000; // en milisegundos
        
        // Verificar que todos los posts se crearon correctamente
        $this->assertCount(10, $post_ids);
        foreach ($post_ids as $post_id) {
            $this->assertIsInt($post_id);
            $this->assertGreaterThan(0, $post_id);
        }
        
        // Verificar que el tiempo es razonable (< 5 segundos para 10 posts)
        $this->assertLessThan(5000, $execution_time, 
            'La creaci√≥n de 10 posts deber√≠a tomar menos de 5 segundos');
        
        echo "\n‚ö° Performance: 10 posts creados en " . round($execution_time, 2) . "ms\n";
        echo "üõ°Ô∏è Modo activo: " . ($this->isUsingAntiDeadlock() ? 'Anti-deadlock' : 'Est√°ndar') . "\n";
    }
    
    /**
     * Test de resiliencia - verificar manejo de errores
     */
    public function testErrorResilience(): void
    {
        // Intentar operaciones que podr√≠an causar problemas
        global $wpdb;
        
        // Guardar configuraci√≥n original
        $original_timeout = $wpdb->get_var("SELECT @@SESSION.innodb_lock_wait_timeout");
        
        try {
            // Simular condici√≥n potencialmente problem√°tica
            $result = $this->factory->post->create([
                'post_title' => 'Test de Resiliencia',
                'post_content' => str_repeat('Contenido de prueba ', 1000) // Contenido grande
            ]);
            
            $this->assertIsInt($result);
            $this->assertGreaterThan(0, $result);
            
            // Verificar que la configuraci√≥n de BD es la esperada
            if ($this->isUsingAntiDeadlock()) {
                $current_timeout = $wpdb->get_var("SELECT @@SESSION.innodb_lock_wait_timeout");
                $this->assertLessThanOrEqual(5, (int)$current_timeout, 
                    'Timeout de BD deber√≠a estar configurado para anti-deadlock');
            }
            
            echo "\nüõ°Ô∏è Resiliencia: Test completado sin errores\n";
            
        } catch (Exception $e) {
            $this->fail('Test de resiliencia fall√≥: ' . $e->getMessage());
        }
        
        $this->assertTrue(true, 'Sistema resiliente a condiciones adversas');
    }
}
