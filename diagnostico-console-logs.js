// DIAGN√ìSTICO CR√çTICO - Console.log No Aparece
// ==============================================

console.log('%cüö® DIAGN√ìSTICO CR√çTICO - CONSOLE.LOG NO APARECE', 'background: #dc2626; color: white; padding: 12px; font-size: 16px; font-weight: bold;');

// 1. Verificar que console.log funciona b√°sicamente
console.log('%c‚úÖ TEST B√ÅSICO: Console.log funciona', 'color: #059669; font-weight: bold;');
console.error('%c‚úÖ TEST B√ÅSICO: Console.error funciona', 'color: #dc2626; font-weight: bold;');
console.warn('%c‚úÖ TEST B√ÅSICO: Console.warn funciona', 'color: #d97706; font-weight: bold;');

// 2. Verificar DevToolsTestRunner
if (typeof DevToolsTestRunner !== 'undefined') {
    console.log('%cüîç DevToolsTestRunner encontrado', 'color: #059669; font-weight: bold;');
    
    // Verificar si hay instancias
    const buttons = document.querySelectorAll('button[data-action="run_single_test"]');
    console.log(`üî¢ Botones run_single_test encontrados: ${buttons.length}`);
    
    if (buttons.length > 0) {
        const testButton = buttons[0];
        console.log('üéØ Bot√≥n de test seleccionado:', testButton.dataset.testFile);
        
        // INTERCEPTAR EL M√âTODO handleSingleTest
        const originalHandleSingleTest = DevToolsTestRunner.prototype.handleSingleTest;
        
        DevToolsTestRunner.prototype.handleSingleTest = function(button) {
            console.log('%cüöÄ INTERCEPTED: handleSingleTest llamado', 'background: #f59e0b; color: white; padding: 8px; font-weight: bold;');
            console.log('   ‚Ä¢ Button:', button);
            console.log('   ‚Ä¢ Test file:', button.dataset.testFile);
            
            // Llamar al m√©todo original
            return originalHandleSingleTest.call(this, button);
        };
        
        // INTERCEPTAR EL M√âTODO executeTest
        const originalExecuteTest = DevToolsTestRunner.prototype.executeTest;
        
        DevToolsTestRunner.prototype.executeTest = function(action, data) {
            console.log('%cüì° INTERCEPTED: executeTest llamado', 'background: #8b5cf6; color: white; padding: 8px; font-weight: bold;');
            console.log('   ‚Ä¢ Action:', action);
            console.log('   ‚Ä¢ Data:', data);
            
            // Llamar al m√©todo original
            const result = originalExecuteTest.call(this, action, data);
            
            // Interceptar la promesa
            if (result && typeof result.then === 'function') {
                return result.then(response => {
                    console.log('%cüì• INTERCEPTED: executeTest response', 'background: #059669; color: white; padding: 8px; font-weight: bold;');
                    console.log('   ‚Ä¢ Response:', response);
                    return response;
                });
            }
            
            return result;
        };
        
        // INTERCEPTAR EL M√âTODO processTestResult
        const originalProcessTestResult = DevToolsTestRunner.prototype.processTestResult;
        
        DevToolsTestRunner.prototype.processTestResult = function(result, testName) {
            console.log('%cüé® INTERCEPTED: processTestResult llamado', 'background: #ec4899; color: white; padding: 8px; font-weight: bold;');
            console.log('   ‚Ä¢ Result:', result);
            console.log('   ‚Ä¢ Test name:', testName);
            console.log('   ‚Ä¢ Result.output existe:', !!result.output);
            console.log('   ‚Ä¢ Result.output length:', result.output ? result.output.length : 0);
            
            // Llamar al m√©todo original
            return originalProcessTestResult.call(this, result, testName);
        };
        
        console.log('%c‚úÖ INTERCEPTORES INSTALADOS', 'color: #059669; font-weight: bold;');
        console.log('üìã Ahora haz click en un bot√≥n "Ejecutar Test" y ver√°s todos los pasos interceptados');
        
        // Funci√≥n para test manual inmediato
        window.testManualInmediato = function() {
            console.log('%cüéÆ TEST MANUAL INMEDIATO', 'background: #3b82f6; color: white; padding: 8px; font-weight: bold;');
            
            // Simular click directo
            console.log('üëÜ Haciendo click en el primer bot√≥n...');
            testButton.click();
        };
        
        console.log('%cüéÆ Comando disponible: testManualInmediato()', 'background: #6366f1; color: white; padding: 8px;');
        
    } else {
        console.error('‚ùå No se encontraron botones run_single_test');
    }
} else {
    console.error('‚ùå DevToolsTestRunner no est√° definido');
}

// 3. Verificar configuraci√≥n AJAX
if (typeof tkn_dev_tools_config !== 'undefined') {
    console.log('%cüîß Configuraci√≥n AJAX:', 'color: #7c3aed; font-weight: bold;');
    console.log('   ‚Ä¢ ajaxUrl:', tkn_dev_tools_config.ajaxUrl);
    console.log('   ‚Ä¢ nonce:', tkn_dev_tools_config.nonce);
} else {
    console.error('‚ùå tkn_dev_tools_config no est√° definido');
}

console.log('\n' + '='.repeat(80));
console.log('%cüéØ DIAGN√ìSTICO INSTALADO', 'color: #059669; font-weight: bold;');
console.log('üìã Pasos siguientes:');
console.log('   1. Haz click en un bot√≥n "Ejecutar Test"');
console.log('   2. O ejecuta: testManualInmediato()');
console.log('   3. Observa qu√© interceptores se activan');
