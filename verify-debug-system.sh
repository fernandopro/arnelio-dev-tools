#!/bin/bash
# Script de verificaci√≥n del Sistema de Debug WordPress Din√°mico
# Parte del n√∫cleo de Dev-Tools Arquitectura 3.0
# Plugin-agn√≥stico - Detecta autom√°ticamente la ruta base

echo "üîß === VERIFICACI√ìN SISTEMA DEBUG WORDPRESS DIN√ÅMICO ==="
echo ""

# Detectar directorio base de dev-tools (plugin-agn√≥stico)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEV_TOOLS_DIR="$SCRIPT_DIR"

echo "üìÅ Directorio dev-tools detectado: $DEV_TOOLS_DIR"
echo ""

# Verificar que el archivo existe
DEBUG_FILE="$DEV_TOOLS_DIR/core/DebugWordPressDynamic.php"
if [ -f "$DEBUG_FILE" ]; then
    echo "‚úÖ Archivo core encontrado: DebugWordPressDynamic.php"
else
    echo "‚ùå ERROR: Archivo core NO encontrado"
    echo "   Ruta esperada: $DEBUG_FILE"
    exit 1
fi

# Verificar que est√° cargado en loader.php
LOADER_FILE="$DEV_TOOLS_DIR/loader.php"
if [ -f "$LOADER_FILE" ] && grep -q "DebugWordPressDynamic.php" "$LOADER_FILE"; then
    echo "‚úÖ Sistema integrado en loader.php"
else
    echo "‚ùå ERROR: Sistema NO integrado en loader.php"
    echo "   Archivo loader: $LOADER_FILE"
    exit 1
fi

# Verificar sintaxis PHP
echo ""
echo "üìã Verificando sintaxis PHP..."
php -l "$DEBUG_FILE"
if [ $? -eq 0 ]; then
    echo "‚úÖ Sintaxis PHP v√°lida"
else
    echo "‚ùå ERROR: Sintaxis PHP inv√°lida"
    exit 1
fi

# Verificar documentaci√≥n
DOC_FILE="$DEV_TOOLS_DIR/docs/DEBUG-WORDPRESS-DYNAMIC.md"
if [ -f "$DOC_FILE" ]; then
    echo "‚úÖ Documentaci√≥n encontrada: DEBUG-WORDPRESS-DYNAMIC.md"
else
    echo "‚ùå ERROR: Documentaci√≥n NO encontrada"
    echo "   Ruta esperada: $DOC_FILE"
    exit 1
fi

# Verificar script de prueba (puede estar en plugin padre)
PLUGIN_DIR="$(dirname "$DEV_TOOLS_DIR")"
TEST_FILE="$PLUGIN_DIR/test-debug-system-consolidated.js"
if [ -f "$TEST_FILE" ]; then
    echo "‚úÖ Script de prueba encontrado: test-debug-system-consolidated.js"
    echo "   Ubicaci√≥n: $TEST_FILE"
else
    echo "‚ö†Ô∏è  AVISO: Script de prueba NO encontrado (opcional)"
    echo "   Ruta esperada: $TEST_FILE"
fi

# Verificar actualizaci√≥n en estado de arquitectura
ESTADO_FILE="$DEV_TOOLS_DIR/docs/ESTADO-ARQUITECTURA-3.0.md"
if [ -f "$ESTADO_FILE" ] && grep -q "DebugWordPressDynamic.php" "$ESTADO_FILE"; then
    echo "‚úÖ Estado de arquitectura actualizado"
else
    echo "‚ùå ERROR: Estado de arquitectura NO actualizado"
    echo "   Archivo estado: $ESTADO_FILE"
    exit 1
fi

# Verificar compilaci√≥n dev-tools
DIST_DIR="$DEV_TOOLS_DIR/dist"
if [ -d "$DIST_DIR" ] && [ "$(ls -A $DIST_DIR)" ]; then
    echo "‚úÖ Dev-tools compilado correctamente"
else
    echo "‚ùå ERROR: Dev-tools NO compilado"
    echo "   Directorio dist: $DIST_DIR"
    echo "   Ejecuta: cd $DEV_TOOLS_DIR && npm run dev"
    exit 1
fi

echo ""
echo "üéØ === INSTRUCCIONES DE PRUEBA ==="
echo ""
echo "1. üåê DEBUG VISUAL (en WordPress admin):"
echo "   ‚Ä¢ Configuraci√≥n general: ?debug_config=1"
echo "   ‚Ä¢ Debug de URLs: ?debug_urls=1"
echo "   ‚Ä¢ Ejemplo: /wp-admin/tools.php?page=dev_tools&debug_config=1"
echo ""
echo "2. üß™ DEBUG PROGRAM√ÅTICO (consola del navegador):"
if [ -f "$TEST_FILE" ]; then
    echo "   ‚Ä¢ Ejecutar contenido de: $TEST_FILE"
else
    echo "   ‚Ä¢ Usar: DevToolsDebugWordPressDynamic.getInstance().get_debug_url_data()"
fi
echo ""
echo "3. üìã FUNCIONES PHP DISPONIBLES (autom√°ticas):"
echo "   ‚Ä¢ get_debug_url_data()"
echo "   ‚Ä¢ validate_url_consistency(\$urls, \$config)"
echo "   ‚Ä¢ log_url_issues(\$issues, \$context)"
echo "   ‚Ä¢ get_debug_validation_nonce()"
echo ""
echo "4. üîó ENDPOINTS AJAX (autom√°ticos):"
echo "   ‚Ä¢ wp_ajax_debug_validate_urls"
echo "   ‚Ä¢ wp_ajax_debug_url_generation"
echo ""
echo "5. üìñ DOCUMENTACI√ìN COMPLETA:"
echo "   ‚Ä¢ $DOC_FILE"
echo ""
echo "6. üîß ERROR LOG (Local by Flywheel):"
echo "   ‚Ä¢ Monitorear: tail -f \"/Users/[usuario]/Local Sites/[sitio]/logs/php/error.log\""
echo ""
echo "‚úÖ === SISTEMA DE DEBUG LISTO PARA USO ==="
echo "üöÄ Disponible autom√°ticamente en todos los plugins que usen Dev-Tools"
echo "üìç Instalado en: $DEV_TOOLS_DIR"
