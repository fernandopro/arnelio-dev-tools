/**
 * Verificaci√≥n del Sistema Din√°mico Dev Tools
 * 
 * Script para verificar que el sistema dev-tools funciona correctamente
 * con configuraci√≥n din√°mica (plugin-agn√≥stico)
 */

console.log('%cüîß VERIFICACI√ìN SISTEMA DIN√ÅMICO DEV TOOLS', 
    'background: linear-gradient(135deg, #2563eb, #1d4ed8); color: white; padding: 10px 16px; border-radius: 6px; font-weight: bold;');

// Verificar configuraci√≥n din√°mica
console.group('üìã Configuraci√≥n Din√°mica');

if (typeof tkn_dev_tools_config !== 'undefined') {
    console.log('‚úÖ Configuraci√≥n localizada detectada');
    console.table(tkn_dev_tools_config);
    
    // Verificar campos din√°micos clave
    const requiredFields = ['ajaxUrl', 'ajaxAction', 'pluginName', 'pluginSlug'];
    requiredFields.forEach(field => {
        if (tkn_dev_tools_config[field]) {
            console.log(`‚úÖ ${field}: ${tkn_dev_tools_config[field]}`);
        } else {
            console.warn(`‚ö†Ô∏è ${field}: No configurado`);
        }
    });
} else {
    console.error('‚ùå Configuraci√≥n localizada NO detectada');
}

console.groupEnd();

// Verificar instancia del controlador
console.group('üéõÔ∏è Controlador Principal');

if (typeof DevToolsController !== 'undefined') {
    console.log('‚úÖ Clase DevToolsController disponible');
    
    if (window.DevToolsController) {
        console.log('‚úÖ Instancia global creada');
        console.log('Estado:', {
            initialized: window.DevToolsController.isInitialized,
            debugMode: window.DevToolsController.debugMode,
            verboseMode: window.DevToolsController.verboseMode,
            config: window.DevToolsController.config
        });
    } else {
        console.warn('‚ö†Ô∏è Instancia global NO creada');
    }
} else {
    console.error('‚ùå Clase DevToolsController NO disponible');
}

console.groupEnd();

// Verificar API p√∫blica
console.group('üîå API P√∫blica');

if (window.DevToolsAPI) {
    console.log('‚úÖ API p√∫blica disponible');
    console.log('M√©todos disponibles:', Object.keys(window.DevToolsAPI));
} else {
    console.error('‚ùå API p√∫blica NO disponible');
}

console.groupEnd();

// Verificar sistema de testing
console.group('üß™ Sistema de Testing');

if (typeof DevToolsTestRunner !== 'undefined') {
    console.log('‚úÖ Clase DevToolsTestRunner disponible');
    
    if (window.DevToolsTestRunner) {
        console.log('‚úÖ Instancia de TestRunner creada');
        console.log('Configuraci√≥n:', window.DevToolsTestRunner.config);
    } else {
        console.warn('‚ö†Ô∏è Instancia de TestRunner NO creada');
    }
} else {
    console.error('‚ùå Clase DevToolsTestRunner NO disponible');
}

console.groupEnd();

// Verificar funciones din√°micas
console.group('‚öôÔ∏è Funciones Din√°micas');

if (window.DevToolsController && typeof window.DevToolsController.getAjaxAction === 'function') {
    console.log('‚úÖ Funci√≥n getAjaxAction disponible');
    
    // Probar generaci√≥n de acciones din√°micas
    const testActions = ['ping', 'check_anti_deadlock', 'check_test_framework', 'action'];
    testActions.forEach(action => {
        const generatedAction = window.DevToolsController.getAjaxAction(action);
        console.log(`  ${action} ‚Üí ${generatedAction}`);
    });
} else {
    console.error('‚ùå Funci√≥n getAjaxAction NO disponible');
}

console.groupEnd();

// Verificar URLs din√°micas
console.group('üåê URLs Din√°micas');

if (window.DevToolsController && window.DevToolsController.config) {
    const urls = {
        'AJAX URL': window.DevToolsController.config.ajaxUrl,
        'Admin URL': window.DevToolsController.config.adminUrl,
        'Site URL': window.DevToolsController.config.siteUrl
    };
    
    Object.entries(urls).forEach(([label, url]) => {
        if (url) {
            console.log(`‚úÖ ${label}: ${url}`);
        } else {
            console.warn(`‚ö†Ô∏è ${label}: No configurada`);
        }
    });
} else {
    console.error('‚ùå URLs din√°micas NO disponibles');
}

console.groupEnd();

// Resumen final
console.group('üìä Resumen de Verificaci√≥n');

const checks = {
    'Configuraci√≥n Localizada': typeof tkn_dev_tools_config !== 'undefined',
    'DevToolsController': typeof DevToolsController !== 'undefined' && !!window.DevToolsController,
    'API P√∫blica': !!window.DevToolsAPI,
    'Sistema de Testing': typeof DevToolsTestRunner !== 'undefined',
    'Funciones Din√°micas': window.DevToolsController && typeof window.DevToolsController.getAjaxAction === 'function'
};

const passed = Object.values(checks).filter(Boolean).length;
const total = Object.keys(checks).length;

console.log(`%c${passed}/${total} verificaciones pasaron`, 
    passed === total ? 'color: #22c55e; font-weight: bold;' : 'color: #ef4444; font-weight: bold;');

Object.entries(checks).forEach(([check, passed]) => {
    console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}`);
});

if (passed === total) {
    console.log('%cüéâ Sistema din√°mico funcionando correctamente', 
        'background: #22c55e; color: white; padding: 8px 12px; border-radius: 4px; font-weight: bold;');
} else {
    console.log('%c‚ö†Ô∏è Sistema din√°mico con problemas', 
        'background: #ef4444; color: white; padding: 8px 12px; border-radius: 4px; font-weight: bold;');
}

console.groupEnd();

console.log('%c‚ú® Verificaci√≥n completada', 
    'background: #7c3aed; color: white; padding: 6px 10px; border-radius: 4px; font-weight: bold;');
